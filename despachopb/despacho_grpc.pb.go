// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: despacho.proto

package despachopb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DespachoService_EnviarEntregas_FullMethodName   = "/despacho.DespachoService/EnviarEntregas"
	DespachoService_ObtenerDespachos_FullMethodName = "/despacho.DespachoService/ObtenerDespachos"
)

// DespachoServiceClient is the client API for DespachoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DespachoServiceClient interface {
	EnviarEntregas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Guia, EntregaResponse], error)
	ObtenerDespachos(ctx context.Context, in *DespachoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Guia], error)
}

type despachoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDespachoServiceClient(cc grpc.ClientConnInterface) DespachoServiceClient {
	return &despachoServiceClient{cc}
}

func (c *despachoServiceClient) EnviarEntregas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Guia, EntregaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DespachoService_ServiceDesc.Streams[0], DespachoService_EnviarEntregas_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Guia, EntregaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DespachoService_EnviarEntregasClient = grpc.ClientStreamingClient[Guia, EntregaResponse]

func (c *despachoServiceClient) ObtenerDespachos(ctx context.Context, in *DespachoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Guia], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DespachoService_ServiceDesc.Streams[1], DespachoService_ObtenerDespachos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DespachoRequest, Guia]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DespachoService_ObtenerDespachosClient = grpc.ServerStreamingClient[Guia]

// DespachoServiceServer is the server API for DespachoService service.
// All implementations must embed UnimplementedDespachoServiceServer
// for forward compatibility.
type DespachoServiceServer interface {
	EnviarEntregas(grpc.ClientStreamingServer[Guia, EntregaResponse]) error
	ObtenerDespachos(*DespachoRequest, grpc.ServerStreamingServer[Guia]) error
	mustEmbedUnimplementedDespachoServiceServer()
}

// UnimplementedDespachoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDespachoServiceServer struct{}

func (UnimplementedDespachoServiceServer) EnviarEntregas(grpc.ClientStreamingServer[Guia, EntregaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnviarEntregas not implemented")
}
func (UnimplementedDespachoServiceServer) ObtenerDespachos(*DespachoRequest, grpc.ServerStreamingServer[Guia]) error {
	return status.Errorf(codes.Unimplemented, "method ObtenerDespachos not implemented")
}
func (UnimplementedDespachoServiceServer) mustEmbedUnimplementedDespachoServiceServer() {}
func (UnimplementedDespachoServiceServer) testEmbeddedByValue()                         {}

// UnsafeDespachoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DespachoServiceServer will
// result in compilation errors.
type UnsafeDespachoServiceServer interface {
	mustEmbedUnimplementedDespachoServiceServer()
}

func RegisterDespachoServiceServer(s grpc.ServiceRegistrar, srv DespachoServiceServer) {
	// If the following call pancis, it indicates UnimplementedDespachoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DespachoService_ServiceDesc, srv)
}

func _DespachoService_EnviarEntregas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DespachoServiceServer).EnviarEntregas(&grpc.GenericServerStream[Guia, EntregaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DespachoService_EnviarEntregasServer = grpc.ClientStreamingServer[Guia, EntregaResponse]

func _DespachoService_ObtenerDespachos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DespachoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DespachoServiceServer).ObtenerDespachos(m, &grpc.GenericServerStream[DespachoRequest, Guia]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DespachoService_ObtenerDespachosServer = grpc.ServerStreamingServer[Guia]

// DespachoService_ServiceDesc is the grpc.ServiceDesc for DespachoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DespachoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "despacho.DespachoService",
	HandlerType: (*DespachoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnviarEntregas",
			Handler:       _DespachoService_EnviarEntregas_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ObtenerDespachos",
			Handler:       _DespachoService_ObtenerDespachos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "despacho.proto",
}
