// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: apptransportistas.proto

package apptransportistaspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppTransportistasService_ObtenerDespachos_FullMethodName     = "/apptransportistas.AppTransportistasService/ObtenerDespachos"
	AppTransportistasService_EnviarEntregas_FullMethodName       = "/apptransportistas.AppTransportistasService/EnviarEntregas"
	AppTransportistasService_EnviarPruebasEntrega_FullMethodName = "/apptransportistas.AppTransportistasService/EnviarPruebasEntrega"
	AppTransportistasService_LoginAdmin_FullMethodName           = "/apptransportistas.AppTransportistasService/LoginAdmin"
	AppTransportistasService_EnviarTracking_FullMethodName       = "/apptransportistas.AppTransportistasService/EnviarTracking"
)

// AppTransportistasServiceClient is the client API for AppTransportistasService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppTransportistasServiceClient interface {
	ObtenerDespachos(ctx context.Context, in *DespachoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Guia], error)
	EnviarEntregas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Guia, EntregaResponse], error)
	EnviarPruebasEntrega(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PruebaEntrega, PruebaEntregaResponse], error)
	LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	EnviarTracking(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Ubicacion, TrackingResponse], error)
}

type appTransportistasServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppTransportistasServiceClient(cc grpc.ClientConnInterface) AppTransportistasServiceClient {
	return &appTransportistasServiceClient{cc}
}

func (c *appTransportistasServiceClient) ObtenerDespachos(ctx context.Context, in *DespachoRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Guia], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppTransportistasService_ServiceDesc.Streams[0], AppTransportistasService_ObtenerDespachos_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DespachoRequest, Guia]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_ObtenerDespachosClient = grpc.ServerStreamingClient[Guia]

func (c *appTransportistasServiceClient) EnviarEntregas(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Guia, EntregaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppTransportistasService_ServiceDesc.Streams[1], AppTransportistasService_EnviarEntregas_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Guia, EntregaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarEntregasClient = grpc.ClientStreamingClient[Guia, EntregaResponse]

func (c *appTransportistasServiceClient) EnviarPruebasEntrega(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[PruebaEntrega, PruebaEntregaResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppTransportistasService_ServiceDesc.Streams[2], AppTransportistasService_EnviarPruebasEntrega_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[PruebaEntrega, PruebaEntregaResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarPruebasEntregaClient = grpc.ClientStreamingClient[PruebaEntrega, PruebaEntregaResponse]

func (c *appTransportistasServiceClient) LoginAdmin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, AppTransportistasService_LoginAdmin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appTransportistasServiceClient) EnviarTracking(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[Ubicacion, TrackingResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AppTransportistasService_ServiceDesc.Streams[3], AppTransportistasService_EnviarTracking_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Ubicacion, TrackingResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarTrackingClient = grpc.ClientStreamingClient[Ubicacion, TrackingResponse]

// AppTransportistasServiceServer is the server API for AppTransportistasService service.
// All implementations must embed UnimplementedAppTransportistasServiceServer
// for forward compatibility.
type AppTransportistasServiceServer interface {
	ObtenerDespachos(*DespachoRequest, grpc.ServerStreamingServer[Guia]) error
	EnviarEntregas(grpc.ClientStreamingServer[Guia, EntregaResponse]) error
	EnviarPruebasEntrega(grpc.ClientStreamingServer[PruebaEntrega, PruebaEntregaResponse]) error
	LoginAdmin(context.Context, *LoginRequest) (*LoginResponse, error)
	EnviarTracking(grpc.ClientStreamingServer[Ubicacion, TrackingResponse]) error
	mustEmbedUnimplementedAppTransportistasServiceServer()
}

// UnimplementedAppTransportistasServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppTransportistasServiceServer struct{}

func (UnimplementedAppTransportistasServiceServer) ObtenerDespachos(*DespachoRequest, grpc.ServerStreamingServer[Guia]) error {
	return status.Errorf(codes.Unimplemented, "method ObtenerDespachos not implemented")
}
func (UnimplementedAppTransportistasServiceServer) EnviarEntregas(grpc.ClientStreamingServer[Guia, EntregaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnviarEntregas not implemented")
}
func (UnimplementedAppTransportistasServiceServer) EnviarPruebasEntrega(grpc.ClientStreamingServer[PruebaEntrega, PruebaEntregaResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnviarPruebasEntrega not implemented")
}
func (UnimplementedAppTransportistasServiceServer) LoginAdmin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAdmin not implemented")
}
func (UnimplementedAppTransportistasServiceServer) EnviarTracking(grpc.ClientStreamingServer[Ubicacion, TrackingResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EnviarTracking not implemented")
}
func (UnimplementedAppTransportistasServiceServer) mustEmbedUnimplementedAppTransportistasServiceServer() {
}
func (UnimplementedAppTransportistasServiceServer) testEmbeddedByValue() {}

// UnsafeAppTransportistasServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppTransportistasServiceServer will
// result in compilation errors.
type UnsafeAppTransportistasServiceServer interface {
	mustEmbedUnimplementedAppTransportistasServiceServer()
}

func RegisterAppTransportistasServiceServer(s grpc.ServiceRegistrar, srv AppTransportistasServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppTransportistasServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppTransportistasService_ServiceDesc, srv)
}

func _AppTransportistasService_ObtenerDespachos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DespachoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AppTransportistasServiceServer).ObtenerDespachos(m, &grpc.GenericServerStream[DespachoRequest, Guia]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_ObtenerDespachosServer = grpc.ServerStreamingServer[Guia]

func _AppTransportistasService_EnviarEntregas_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppTransportistasServiceServer).EnviarEntregas(&grpc.GenericServerStream[Guia, EntregaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarEntregasServer = grpc.ClientStreamingServer[Guia, EntregaResponse]

func _AppTransportistasService_EnviarPruebasEntrega_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppTransportistasServiceServer).EnviarPruebasEntrega(&grpc.GenericServerStream[PruebaEntrega, PruebaEntregaResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarPruebasEntregaServer = grpc.ClientStreamingServer[PruebaEntrega, PruebaEntregaResponse]

func _AppTransportistasService_LoginAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppTransportistasServiceServer).LoginAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppTransportistasService_LoginAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppTransportistasServiceServer).LoginAdmin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppTransportistasService_EnviarTracking_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AppTransportistasServiceServer).EnviarTracking(&grpc.GenericServerStream[Ubicacion, TrackingResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AppTransportistasService_EnviarTrackingServer = grpc.ClientStreamingServer[Ubicacion, TrackingResponse]

// AppTransportistasService_ServiceDesc is the grpc.ServiceDesc for AppTransportistasService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppTransportistasService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apptransportistas.AppTransportistasService",
	HandlerType: (*AppTransportistasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginAdmin",
			Handler:    _AppTransportistasService_LoginAdmin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ObtenerDespachos",
			Handler:       _AppTransportistasService_ObtenerDespachos_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EnviarEntregas",
			Handler:       _AppTransportistasService_EnviarEntregas_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EnviarPruebasEntrega",
			Handler:       _AppTransportistasService_EnviarPruebasEntrega_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EnviarTracking",
			Handler:       _AppTransportistasService_EnviarTracking_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "apptransportistas.proto",
}
